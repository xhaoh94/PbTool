using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace PbTool
{
    [Pb("go")]
    internal class PbGo : PbBase
    {
        [JsonPropertyName("protoc")]
        [JsonInclude]
        public string Protoc = string.Empty;

        [JsonPropertyName("proto_gen_go")]
        [JsonInclude]
        public string ProtocGenGo = string.Empty;

        protected override void OnCreateCmd()
        {
            var files = GetProtoFiles();
            if (files == null) return;

            var csWd = new WriteData();
            csWd.Writeln(@"// Generated by https://github.com/xhaoh94/PbTool");
            csWd.Writeln(@"// DO NOT EDIT!");
            csWd.Writeln($"package {Program.NameSpace.ToLower()}");


            var scWd = new WriteData();
            scWd.Writeln(@"// Generated by https://github.com/xhaoh94/PbTool");
            scWd.Writeln(@"// DO NOT EDIT!");
            scWd.Writeln($"package {Program.NameSpace.ToLower()}");

            var bcstWd = new WriteData();
            bcstWd.Writeln(@"// Generated by https://github.com/xhaoh94/PbTool");
            bcstWd.Writeln(@"// DO NOT EDIT!");
            bcstWd.Writeln($"package {Program.NameSpace.ToLower()}");

            csWd.Writeln();
            scWd.Writeln();
            bcstWd.Writeln();

            csWd.Writeln("const (");
            scWd.Writeln("const (");
            bcstWd.Writeln("const (");

            csWd.StartBlock(false);
            scWd.StartBlock(false);
            bcstWd.StartBlock(false);

            foreach (var file in files)
            {
                var str = File.ReadAllText(file);
                ParseMeesage(str, csWd, scWd, bcstWd);
            }
            csWd.EndBlock(false);
            scWd.EndBlock(false);
            bcstWd.EndBlock(false);

            csWd.Write(")");
            scWd.Write(")");
            bcstWd.Write(")");

            csWd.Export(OutPath, "cs.go");
            scWd.Export(OutPath, "sc.go");
            bcstWd.Export(OutPath, "bcst.go");
        }
        void ParseMeesage(string str, WriteData csWd, WriteData scWd, WriteData bcstWd)
        {
            str = str.Replace("\r", "");
            str = str.Replace("\n", "");
            var matches = CS.Matches(str);
            foreach (Match match in matches)
            {
                var cmd = int.Parse(match.Groups["cmd"].Value);
                var title = match.Groups["title"].Value;
                csWd.Writeln($"CMD_{title} uint32 = {cmd}");
            }

            matches = SC.Matches(str);
            foreach (Match match in matches)
            {
                var cmd = int.Parse(match.Groups["cmd"].Value);
                var title = match.Groups["title"].Value;
                scWd.Writeln($"CMD_{title} uint32 = {cmd}");
            }

            matches = BCST.Matches(str);
            foreach (Match match in matches)
            {
                var cmd = int.Parse(match.Groups["cmd"].Value);
                var title = match.Groups["title"].Value;
                bcstWd.Writeln($"CMD_{title} uint32 = {cmd}");
            }
        }
        protected override bool OnParse()
        {
            if (string.IsNullOrEmpty(Protoc))
            {
                Protoc = "./protoc.exe";
            }

            Protoc = GetPaserPath(Protoc);
            if (!File.Exists(Protoc))
            {
                Program.LogError("没找到protoc.exe");
                return false;
            }

            if (string.IsNullOrEmpty(ProtocGenGo))
            {
                ProtocGenGo = "./protoc-gen-go.exe";
            }

            ProtocGenGo = GetPaserPath(ProtocGenGo);

            if (!File.Exists(ProtocGenGo))
            {
                Program.LogError("没找到protoc-gen-go.exe");
                return false;
            }


            var files = GetProtoFiles();
            if (files == null)
            {
                Program.LogError("没有找到Proto文件");
                return false;
            }

            var exe = $"--plugin=protoc-gen-go={ProtocGenGo} --proto_path={InPath} --go_out=plugins=grpc:{OutPath}";
            foreach (var file in files)
            {
                Console.WriteLine(file);
                Command.Run(Protoc, $"{exe} {file}");
            }

            return true;
        }
    }
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/rpc_login.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type G2L_RoleList struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *G2L_RoleList) Reset()         { *m = G2L_RoleList{} }
func (m *G2L_RoleList) String() string { return proto.CompactTextString(m) }
func (*G2L_RoleList) ProtoMessage()    {}
func (*G2L_RoleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_17f756cc2d0dbb0a, []int{0}
}

func (m *G2L_RoleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_G2L_RoleList.Unmarshal(m, b)
}
func (m *G2L_RoleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_G2L_RoleList.Marshal(b, m, deterministic)
}
func (m *G2L_RoleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G2L_RoleList.Merge(m, src)
}
func (m *G2L_RoleList) XXX_Size() int {
	return xxx_messageInfo_G2L_RoleList.Size(m)
}
func (m *G2L_RoleList) XXX_DiscardUnknown() {
	xxx_messageInfo_G2L_RoleList.DiscardUnknown(m)
}

var xxx_messageInfo_G2L_RoleList proto.InternalMessageInfo

func (m *G2L_RoleList) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type G2L_CreateRole struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Account              string   `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *G2L_CreateRole) Reset()         { *m = G2L_CreateRole{} }
func (m *G2L_CreateRole) String() string { return proto.CompactTextString(m) }
func (*G2L_CreateRole) ProtoMessage()    {}
func (*G2L_CreateRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_17f756cc2d0dbb0a, []int{1}
}

func (m *G2L_CreateRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_G2L_CreateRole.Unmarshal(m, b)
}
func (m *G2L_CreateRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_G2L_CreateRole.Marshal(b, m, deterministic)
}
func (m *G2L_CreateRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_G2L_CreateRole.Merge(m, src)
}
func (m *G2L_CreateRole) XXX_Size() int {
	return xxx_messageInfo_G2L_CreateRole.Size(m)
}
func (m *G2L_CreateRole) XXX_DiscardUnknown() {
	xxx_messageInfo_G2L_CreateRole.DiscardUnknown(m)
}

var xxx_messageInfo_G2L_CreateRole proto.InternalMessageInfo

func (m *G2L_CreateRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *G2L_CreateRole) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func init() {
	proto.RegisterType((*G2L_RoleList)(nil), "G2L_RoleList")
	proto.RegisterType((*G2L_CreateRole)(nil), "G2L_CreateRole")
}

func init() { proto.RegisterFile("rpc/rpc_login.proto", fileDescriptor_17f756cc2d0dbb0a) }

var fileDescriptor_17f756cc2d0dbb0a = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x3b, 0x19, 0xd3, 0x3e, 0x5d, 0xab, 0x71, 0x87, 0x91, 0x93, 0xe4, 0x34, 0x04, 0x33,
	0x89, 0x07, 0x0f, 0x03, 0x87, 0xf6, 0x30, 0x02, 0x3d, 0xb5, 0x37, 0x2f, 0xa5, 0x0b, 0x61, 0x14,
	0x66, 0x13, 0xb2, 0xf8, 0xff, 0x4b, 0xb2, 0x99, 0x65, 0xbd, 0xe5, 0xf3, 0xe1, 0xfd, 0xe0, 0x7d,
	0x03, 0x8f, 0x46, 0x8b, 0xa5, 0xd1, 0xa2, 0xd9, 0xab, 0x5d, 0xd7, 0x53, 0x6d, 0x94, 0x55, 0xf8,
	0xc1, 0xc3, 0x32, 0x52, 0x64, 0x01, 0x77, 0x1b, 0x56, 0x36, 0x95, 0xda, 0xcb, 0xb2, 0x3b, 0x58,
	0x34, 0x87, 0xeb, 0x56, 0x08, 0xf5, 0xdb, 0xdb, 0xf9, 0xe8, 0x69, 0xb4, 0x48, 0xab, 0x7f, 0x24,
	0x1f, 0x90, 0xb9, 0xca, 0xc2, 0xc8, 0xd6, 0x4a, 0x57, 0x8f, 0x10, 0x8c, 0xfb, 0xf6, 0x47, 0x9e,
	0x0a, 0xfd, 0x3b, 0xee, 0xbf, 0xba, 0xe8, 0x67, 0x35, 0xdc, 0xf3, 0x4a, 0xee, 0xba, 0x83, 0x95,
	0xe6, 0xf3, 0xe8, 0xd0, 0x1a, 0xf2, 0xa1, 0x9a, 0xd1, 0x82, 0xd5, 0xcd, 0xc0, 0xe2, 0x19, 0xad,
	0x59, 0x31, 0xb4, 0x24, 0x61, 0x2b, 0x00, 0x5e, 0xba, 0x73, 0x36, 0x6e, 0xf9, 0x0b, 0xa4, 0x67,
	0xc8, 0xfc, 0xa0, 0xc0, 0x38, 0xf3, 0x23, 0x02, 0x93, 0x84, 0xbd, 0x43, 0xca, 0xc3, 0xe1, 0xcf,
	0x70, 0x13, 0xde, 0x53, 0x1a, 0x67, 0x82, 0xa7, 0xc7, 0xe5, 0x27, 0x24, 0x09, 0x5b, 0xc3, 0x2d,
	0x8f, 0x72, 0x78, 0x05, 0x88, 0x28, 0xa7, 0x97, 0x31, 0xe1, 0xdc, 0xb7, 0x9f, 0x05, 0x49, 0xbe,
	0x26, 0xdf, 0x63, 0xba, 0xd2, 0xdb, 0xed, 0xc4, 0x7f, 0xc2, 0xdb, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf7, 0xc3, 0x63, 0xaf, 0xae, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IRegisterAccountClient is the client API for IRegisterAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IRegisterAccountClient interface {
	RegisterAccount(ctx context.Context, in *C2S_RegisterAccount, opts ...grpc.CallOption) (*S2C_RegisterAccount, error)
}

type iRegisterAccountClient struct {
	cc *grpc.ClientConn
}

func NewIRegisterAccountClient(cc *grpc.ClientConn) IRegisterAccountClient {
	return &iRegisterAccountClient{cc}
}

func (c *iRegisterAccountClient) RegisterAccount(ctx context.Context, in *C2S_RegisterAccount, opts ...grpc.CallOption) (*S2C_RegisterAccount, error) {
	out := new(S2C_RegisterAccount)
	err := c.cc.Invoke(ctx, "/IRegisterAccount/RegisterAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IRegisterAccountServer is the server API for IRegisterAccount service.
type IRegisterAccountServer interface {
	RegisterAccount(context.Context, *C2S_RegisterAccount) (*S2C_RegisterAccount, error)
}

// UnimplementedIRegisterAccountServer can be embedded to have forward compatible implementations.
type UnimplementedIRegisterAccountServer struct {
}

func (*UnimplementedIRegisterAccountServer) RegisterAccount(ctx context.Context, req *C2S_RegisterAccount) (*S2C_RegisterAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}

func RegisterIRegisterAccountServer(s *grpc.Server, srv IRegisterAccountServer) {
	s.RegisterService(&_IRegisterAccount_serviceDesc, srv)
}

func _IRegisterAccount_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_RegisterAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IRegisterAccountServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IRegisterAccount/RegisterAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IRegisterAccountServer).RegisterAccount(ctx, req.(*C2S_RegisterAccount))
	}
	return interceptor(ctx, in, info, handler)
}

var _IRegisterAccount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IRegisterAccount",
	HandlerType: (*IRegisterAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAccount",
			Handler:    _IRegisterAccount_RegisterAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc_login.proto",
}

// ILoginGameClient is the client API for ILoginGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ILoginGameClient interface {
	LoginGame(ctx context.Context, in *C2S_LoginGame, opts ...grpc.CallOption) (*S2C_LoginGame, error)
}

type iLoginGameClient struct {
	cc *grpc.ClientConn
}

func NewILoginGameClient(cc *grpc.ClientConn) ILoginGameClient {
	return &iLoginGameClient{cc}
}

func (c *iLoginGameClient) LoginGame(ctx context.Context, in *C2S_LoginGame, opts ...grpc.CallOption) (*S2C_LoginGame, error) {
	out := new(S2C_LoginGame)
	err := c.cc.Invoke(ctx, "/ILoginGame/LoginGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ILoginGameServer is the server API for ILoginGame service.
type ILoginGameServer interface {
	LoginGame(context.Context, *C2S_LoginGame) (*S2C_LoginGame, error)
}

// UnimplementedILoginGameServer can be embedded to have forward compatible implementations.
type UnimplementedILoginGameServer struct {
}

func (*UnimplementedILoginGameServer) LoginGame(ctx context.Context, req *C2S_LoginGame) (*S2C_LoginGame, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginGame not implemented")
}

func RegisterILoginGameServer(s *grpc.Server, srv ILoginGameServer) {
	s.RegisterService(&_ILoginGame_serviceDesc, srv)
}

func _ILoginGame_LoginGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C2S_LoginGame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ILoginGameServer).LoginGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ILoginGame/LoginGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ILoginGameServer).LoginGame(ctx, req.(*C2S_LoginGame))
	}
	return interceptor(ctx, in, info, handler)
}

var _ILoginGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ILoginGame",
	HandlerType: (*ILoginGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginGame",
			Handler:    _ILoginGame_LoginGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc_login.proto",
}

// IRoleListClient is the client API for IRoleList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IRoleListClient interface {
	RoleList(ctx context.Context, in *G2L_RoleList, opts ...grpc.CallOption) (*S2C_RoleList, error)
}

type iRoleListClient struct {
	cc *grpc.ClientConn
}

func NewIRoleListClient(cc *grpc.ClientConn) IRoleListClient {
	return &iRoleListClient{cc}
}

func (c *iRoleListClient) RoleList(ctx context.Context, in *G2L_RoleList, opts ...grpc.CallOption) (*S2C_RoleList, error) {
	out := new(S2C_RoleList)
	err := c.cc.Invoke(ctx, "/IRoleList/RoleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IRoleListServer is the server API for IRoleList service.
type IRoleListServer interface {
	RoleList(context.Context, *G2L_RoleList) (*S2C_RoleList, error)
}

// UnimplementedIRoleListServer can be embedded to have forward compatible implementations.
type UnimplementedIRoleListServer struct {
}

func (*UnimplementedIRoleListServer) RoleList(ctx context.Context, req *G2L_RoleList) (*S2C_RoleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RoleList not implemented")
}

func RegisterIRoleListServer(s *grpc.Server, srv IRoleListServer) {
	s.RegisterService(&_IRoleList_serviceDesc, srv)
}

func _IRoleList_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(G2L_RoleList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IRoleListServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IRoleList/RoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IRoleListServer).RoleList(ctx, req.(*G2L_RoleList))
	}
	return interceptor(ctx, in, info, handler)
}

var _IRoleList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IRoleList",
	HandlerType: (*IRoleListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoleList",
			Handler:    _IRoleList_RoleList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc_login.proto",
}

// ICreateRoleClient is the client API for ICreateRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ICreateRoleClient interface {
	CreateRole(ctx context.Context, in *G2L_CreateRole, opts ...grpc.CallOption) (*S2C_CreateRole, error)
}

type iCreateRoleClient struct {
	cc *grpc.ClientConn
}

func NewICreateRoleClient(cc *grpc.ClientConn) ICreateRoleClient {
	return &iCreateRoleClient{cc}
}

func (c *iCreateRoleClient) CreateRole(ctx context.Context, in *G2L_CreateRole, opts ...grpc.CallOption) (*S2C_CreateRole, error) {
	out := new(S2C_CreateRole)
	err := c.cc.Invoke(ctx, "/ICreateRole/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ICreateRoleServer is the server API for ICreateRole service.
type ICreateRoleServer interface {
	CreateRole(context.Context, *G2L_CreateRole) (*S2C_CreateRole, error)
}

// UnimplementedICreateRoleServer can be embedded to have forward compatible implementations.
type UnimplementedICreateRoleServer struct {
}

func (*UnimplementedICreateRoleServer) CreateRole(ctx context.Context, req *G2L_CreateRole) (*S2C_CreateRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}

func RegisterICreateRoleServer(s *grpc.Server, srv ICreateRoleServer) {
	s.RegisterService(&_ICreateRole_serviceDesc, srv)
}

func _ICreateRole_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(G2L_CreateRole)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ICreateRoleServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ICreateRole/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ICreateRoleServer).CreateRole(ctx, req.(*G2L_CreateRole))
	}
	return interceptor(ctx, in, info, handler)
}

var _ICreateRole_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ICreateRole",
	HandlerType: (*ICreateRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _ICreateRole_CreateRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rpc_login.proto",
}
